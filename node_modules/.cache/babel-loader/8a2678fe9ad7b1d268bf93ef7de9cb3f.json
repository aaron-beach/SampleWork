{"ast":null,"code":"var _jsxFileName = \"/Users/aaronbeach/Desktop/workspace/riseworks/spa/src/Projects/Chat/index.jsx\";\nimport { AppContext } from \"Context\";\nimport Avatar from \"SharedComponents/Avatar\";\nimport Card from \"../Card\";\nimport { Container } from \"react-bootstrap\";\nimport Input from \"./Input\";\nimport MessageGroup from \"./MessageGroup\";\nimport React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport ZeroState from \"SharedComponents/ZeroState\";\nimport { formatDistance } from \"date-fns\";\nimport styled from \"styled-components\";\nconst HeaderContent = styled.div`\n  margin-top: -0.625rem;\n  .small {\n    font-size: 0.875rem;\n  }\n`;\nconst MessageWrapper = styled.div`\n  height: 50vh;\n  overflow-y: scroll;\n  overflow-x: hidden;\n`;\nconst ZeroStateWrapper = styled.div`\n  height: 50vh;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nconst ZERO_STATE_MODE_NO_PROJECT = \"noProject\";\nconst ZERO_STATE_MODE_NO_MESSAGES = \"noMessages\";\n\nfunction Chat({\n  currentProjectID,\n  partner,\n  messages = []\n}) {\n  const renderZeroState = (mode = ZERO_STATE_MODE_NO_PROJECT) => {\n    const title = mode === ZERO_STATE_MODE_NO_PROJECT ? \"No project selected\" : \"No messages\";\n    return React.createElement(ZeroStateWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(ZeroState, {\n      title: title,\n      body: \"Select a project to view chat messages.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }));\n  };\n\n  const getGroupedMessages = () => {\n    let output = [[]];\n    messages.forEach(m => {\n      const previousGroup = output[output.length - 1];\n      const previousMessage = previousGroup[previousGroup.length - 1];\n\n      if (!previousMessage) {\n        output[output.length - 1].push(m);\n        return;\n      } // Group messages if they are by the same author.\n\n\n      if (previousMessage.author.id === m.author.id) {\n        // Probably want to add a check in here that only groups author messages\n        // if they are within ...an hour of each other?\n        output[output.length - 1].push(m);\n        return;\n      } // No grouping done, create a new group.\n\n\n      output.push([m]);\n    });\n    return output;\n  };\n\n  const renderMessages = () => {\n    const groupedMessages = getGroupedMessages();\n    if (!groupedMessages || !groupedMessages.length || !groupedMessages[0].length) return null;\n    return React.createElement(AppContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, ({\n      user\n    }) => {\n      return React.createElement(MessageWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, groupedMessages.map(msgs => {\n        const msg = msgs[0];\n        return React.createElement(MessageGroup, {\n          isAuthedUser: msg.author.id === user.id,\n          key: `message-group-${msg.id}`,\n          messages: msgs,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        });\n      }));\n    });\n  };\n\n  const renderBody = () => {\n    if (!currentProjectID) {\n      return renderZeroState(ZERO_STATE_MODE_NO_PROJECT);\n    }\n\n    if (!messages.length) {\n      return renderZeroState(ZERO_STATE_MODE_NO_MESSAGES);\n    }\n\n    return renderMessages();\n  };\n\n  const handleInputSubmit = value => {\n    console.log(value);\n  };\n\n  const renderTitle = () => {\n    if (!currentProjectID) {\n      return React.createElement(Card.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"\\xA0\");\n    }\n\n    return React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(HeaderContent, {\n      className: \"d-flex align-items-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Avatar, {\n      name: partner.name,\n      image: partner.avatar,\n      size: 36,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"d-block flex-grow-1 ml-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      className: \"font-weight-bold\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, partner.name)), React.createElement(\"span\", {\n      className: \"d-block font-weight-light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Last seen:\", \" \", formatDistance(partner.lastSeen, new Date(), {\n      addSuffix: true\n    })))));\n  };\n\n  return React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, renderTitle(), renderBody(), currentProjectID ? React.createElement(Input, {\n    onSubmit: handleInputSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }) : null));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/Users/aaronbeach/Desktop/workspace/riseworks/spa/src/Projects/Chat/index.jsx"],"names":["AppContext","Avatar","Card","Container","Input","MessageGroup","React","Route","ZeroState","formatDistance","styled","HeaderContent","div","MessageWrapper","ZeroStateWrapper","ZERO_STATE_MODE_NO_PROJECT","ZERO_STATE_MODE_NO_MESSAGES","Chat","currentProjectID","partner","messages","renderZeroState","mode","title","getGroupedMessages","output","forEach","m","previousGroup","length","previousMessage","push","author","id","renderMessages","groupedMessages","user","map","msgs","msg","renderBody","handleInputSubmit","value","console","log","renderTitle","name","avatar","lastSeen","Date","addSuffix"],"mappings":";AAAA,SAASA,UAAT,QAA2B,SAA3B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,aAAa,GAAGD,MAAM,CAACE,GAAI;;;;;CAAjC;AAMA,MAAMC,cAAc,GAAGH,MAAM,CAACE,GAAI;;;;CAAlC;AAKA,MAAME,gBAAgB,GAAGJ,MAAM,CAACE,GAAI;;;;;;;CAApC;AASA,MAAMG,0BAA0B,GAAG,WAAnC;AACA,MAAMC,2BAA2B,GAAG,YAApC;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA,gBAAF;AAAoBC,EAAAA,OAApB;AAA6BC,EAAAA,QAAQ,GAAG;AAAxC,CAAd,EAA4D;AAC1D,QAAMC,eAAe,GAAG,CAACC,IAAI,GAAGP,0BAAR,KAAuC;AAC7D,UAAMQ,KAAK,GACTD,IAAI,KAAKP,0BAAT,GACI,qBADJ,GAEI,aAHN;AAIA,WACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,KAAK,EAAEQ,KADT;AAEE,MAAA,IAAI,EAAC,yCAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAQD,GAbD;;AAeA,QAAMC,kBAAkB,GAAG,MAAM;AAC/B,QAAIC,MAAM,GAAG,CAAC,EAAD,CAAb;AACAL,IAAAA,QAAQ,CAACM,OAAT,CAAiBC,CAAC,IAAI;AACpB,YAAMC,aAAa,GAAGH,MAAM,CAACA,MAAM,CAACI,MAAP,GAAgB,CAAjB,CAA5B;AACA,YAAMC,eAAe,GAAGF,aAAa,CAACA,aAAa,CAACC,MAAd,GAAuB,CAAxB,CAArC;;AACA,UAAI,CAACC,eAAL,EAAsB;AACpBL,QAAAA,MAAM,CAACA,MAAM,CAACI,MAAP,GAAgB,CAAjB,CAAN,CAA0BE,IAA1B,CAA+BJ,CAA/B;AACA;AACD,OANmB,CAQpB;;;AACA,UAAIG,eAAe,CAACE,MAAhB,CAAuBC,EAAvB,KAA8BN,CAAC,CAACK,MAAF,CAASC,EAA3C,EAA+C;AAC7C;AACA;AACAR,QAAAA,MAAM,CAACA,MAAM,CAACI,MAAP,GAAgB,CAAjB,CAAN,CAA0BE,IAA1B,CAA+BJ,CAA/B;AACA;AACD,OAdmB,CAgBpB;;;AACAF,MAAAA,MAAM,CAACM,IAAP,CAAY,CAACJ,CAAD,CAAZ;AACD,KAlBD;AAmBA,WAAOF,MAAP;AACD,GAtBD;;AAwBA,QAAMS,cAAc,GAAG,MAAM;AAC3B,UAAMC,eAAe,GAAGX,kBAAkB,EAA1C;AACA,QACE,CAACW,eAAD,IACA,CAACA,eAAe,CAACN,MADjB,IAEA,CAACM,eAAe,CAAC,CAAD,CAAf,CAAmBN,MAHtB,EAKE,OAAO,IAAP;AACF,WACE,oBAAC,UAAD,CAAY,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC;AAAEO,MAAAA;AAAF,KAAD,KAAc;AACb,aACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,eAAe,CAACE,GAAhB,CAAoBC,IAAI,IAAI;AAC3B,cAAMC,GAAG,GAAGD,IAAI,CAAC,CAAD,CAAhB;AACA,eACE,oBAAC,YAAD;AACE,UAAA,YAAY,EAAEC,GAAG,CAACP,MAAJ,CAAWC,EAAX,KAAkBG,IAAI,CAACH,EADvC;AAEE,UAAA,GAAG,EAAG,iBAAgBM,GAAG,CAACN,EAAG,EAF/B;AAGE,UAAA,QAAQ,EAAEK,IAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,OATA,CADH,CADF;AAcD,KAhBH,CADF;AAoBD,GA5BD;;AA8BA,QAAME,UAAU,GAAG,MAAM;AACvB,QAAI,CAACtB,gBAAL,EAAuB;AACrB,aAAOG,eAAe,CAACN,0BAAD,CAAtB;AACD;;AAED,QAAI,CAACK,QAAQ,CAACS,MAAd,EAAsB;AACpB,aAAOR,eAAe,CAACL,2BAAD,CAAtB;AACD;;AACD,WAAOkB,cAAc,EAArB;AACD,GATD;;AAWA,QAAMO,iBAAiB,GAAGC,KAAK,IAAI;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,GAFD;;AAIA,QAAMG,WAAW,GAAG,MAAM;AACxB,QAAI,CAAC3B,gBAAL,EAAuB;AACrB,aAAO,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;;AACD,WACE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAe,MAAA,SAAS,EAAC,2BAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAEC,OAAO,CAAC2B,IAAtB;AAA4B,MAAA,KAAK,EAAE3B,OAAO,CAAC4B,MAA3C;AAAmD,MAAA,IAAI,EAAE,EAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAM,MAAA,SAAS,EAAC,0BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,SAAS,EAAC,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqC5B,OAAO,CAAC2B,IAA7C,CADF,CAFF,EAKE;AAAM,MAAA,SAAS,EAAC,2BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACa,GADb,EAEGrC,cAAc,CAACU,OAAO,CAAC6B,QAAT,EAAmB,IAAIC,IAAJ,EAAnB,EAA+B;AAC5CC,MAAAA,SAAS,EAAE;AADiC,KAA/B,CAFjB,CADF,CALF,CADF,CADF;AAkBD,GAtBD;;AAwBA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,WAAW,EADd,EAEGL,UAAU,EAFb,EAGGtB,gBAAgB,GAAG,oBAAC,KAAD;AAAO,IAAA,QAAQ,EAAEuB,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAA4C,IAH/D,CADF,CADF;AASD;;AAED,eAAexB,IAAf","sourcesContent":["import { AppContext } from \"Context\";\nimport Avatar from \"SharedComponents/Avatar\";\nimport Card from \"../Card\";\nimport { Container } from \"react-bootstrap\";\nimport Input from \"./Input\";\nimport MessageGroup from \"./MessageGroup\";\nimport React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport ZeroState from \"SharedComponents/ZeroState\";\nimport { formatDistance } from \"date-fns\";\nimport styled from \"styled-components\";\n\nconst HeaderContent = styled.div`\n  margin-top: -0.625rem;\n  .small {\n    font-size: 0.875rem;\n  }\n`;\nconst MessageWrapper = styled.div`\n  height: 50vh;\n  overflow-y: scroll;\n  overflow-x: hidden;\n`;\nconst ZeroStateWrapper = styled.div`\n  height: 50vh;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ZERO_STATE_MODE_NO_PROJECT = \"noProject\";\nconst ZERO_STATE_MODE_NO_MESSAGES = \"noMessages\";\n\nfunction Chat({ currentProjectID, partner, messages = [] }) {\n  const renderZeroState = (mode = ZERO_STATE_MODE_NO_PROJECT) => {\n    const title =\n      mode === ZERO_STATE_MODE_NO_PROJECT\n        ? \"No project selected\"\n        : \"No messages\";\n    return (\n      <ZeroStateWrapper>\n        <ZeroState\n          title={title}\n          body=\"Select a project to view chat messages.\"\n        />\n      </ZeroStateWrapper>\n    );\n  };\n\n  const getGroupedMessages = () => {\n    let output = [[]];\n    messages.forEach(m => {\n      const previousGroup = output[output.length - 1];\n      const previousMessage = previousGroup[previousGroup.length - 1];\n      if (!previousMessage) {\n        output[output.length - 1].push(m);\n        return;\n      }\n\n      // Group messages if they are by the same author.\n      if (previousMessage.author.id === m.author.id) {\n        // Probably want to add a check in here that only groups author messages\n        // if they are within ...an hour of each other?\n        output[output.length - 1].push(m);\n        return;\n      }\n\n      // No grouping done, create a new group.\n      output.push([m]);\n    });\n    return output;\n  };\n\n  const renderMessages = () => {\n    const groupedMessages = getGroupedMessages();\n    if (\n      !groupedMessages ||\n      !groupedMessages.length ||\n      !groupedMessages[0].length\n    )\n      return null;\n    return (\n      <AppContext.Consumer>\n        {({ user }) => {\n          return (\n            <MessageWrapper>\n              {groupedMessages.map(msgs => {\n                const msg = msgs[0];\n                return (\n                  <MessageGroup\n                    isAuthedUser={msg.author.id === user.id}\n                    key={`message-group-${msg.id}`}\n                    messages={msgs}\n                  />\n                );\n              })}\n            </MessageWrapper>\n          );\n        }}\n      </AppContext.Consumer>\n    );\n  };\n\n  const renderBody = () => {\n    if (!currentProjectID) {\n      return renderZeroState(ZERO_STATE_MODE_NO_PROJECT);\n    }\n\n    if (!messages.length) {\n      return renderZeroState(ZERO_STATE_MODE_NO_MESSAGES);\n    }\n    return renderMessages();\n  };\n\n  const handleInputSubmit = value => {\n    console.log(value);\n  };\n\n  const renderTitle = () => {\n    if (!currentProjectID) {\n      return <Card.Title>&nbsp;</Card.Title>;\n    }\n    return (\n      <Card.Title>\n        <HeaderContent className=\"d-flex align-items-center\">\n          <Avatar name={partner.name} image={partner.avatar} size={36} />\n          <span className=\"d-block flex-grow-1 ml-2\">\n            <small className=\"font-weight-bold\">{partner.name}</small>\n          </span>\n          <span className=\"d-block font-weight-light\">\n            <small>\n              Last seen:{\" \"}\n              {formatDistance(partner.lastSeen, new Date(), {\n                addSuffix: true\n              })}\n            </small>\n          </span>\n        </HeaderContent>\n      </Card.Title>\n    );\n  };\n\n  return (\n    <Card>\n      <Card.Body>\n        {renderTitle()}\n        {renderBody()}\n        {currentProjectID ? <Input onSubmit={handleInputSubmit} /> : null}\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}