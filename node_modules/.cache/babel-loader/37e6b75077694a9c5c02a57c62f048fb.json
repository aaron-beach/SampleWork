{"ast":null,"code":"var _jsxFileName = \"/Users/aaronbeach/Desktop/workspace/SampleWork/src/Profile/EditProfile/Services/AddService.jsx\";\nimport { Form, Button, Modal } from \"react-bootstrap\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { renderInvalidMessage } from \"SharedComponents/ValidationMessage\";\n\nfunction AddService({\n  onClose,\n  isEditing,\n  editService\n}) {\n  const _useForm = useForm(),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        errors = _useForm.errors;\n\n  const onSubmit = data => {\n    console.log(data);\n    onClose();\n  };\n\n  return React.createElement(Form, {\n    noValidate: true,\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(Modal.Header, {\n    closeButton: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(Modal.Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, isEditing ? `Edit ${editService.name}` : \"Add Service\")), React.createElement(Modal.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(Form.Group, {\n    controlId: \"serviceName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    className: \"sr-only\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"Service Name\"), React.createElement(Form.Control, {\n    name: \"serviceName\",\n    defaultValue: isEditing ? `${editService.name}` : null,\n    placeholder: \"Service Name\",\n    ref: register({\n      required: true\n    }),\n    type: \"text\",\n    isInvalid: Boolean(errors.serviceName),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), errors.serviceName && renderInvalidMessage()), React.createElement(Form.Group, {\n    controlId: \"type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    className: \"sr-only\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Service Type\"), React.createElement(Form.Control, {\n    as: \"select\",\n    name: \"serviceType\",\n    className: \"custom-select text-muted\",\n    placeholder: \"Service Type\",\n    ref: register({\n      required: true\n    }),\n    isInvalid: Boolean(errors.serviceType),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Service Type\"), React.createElement(\"option\", {\n    value: \"Copywriting\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Copywriting\"), React.createElement(\"option\", {\n    value: \"Website Design\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Website Design\")), errors.serviceType && renderInvalidMessage()), React.createElement(Form.Group, {\n    controlId: \"duration\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    className: \"sr-only\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Duration\"), React.createElement(Form.Control, {\n    name: \"serviceDuration\",\n    defaultValue: isEditing ? `${editService.duration}` : null,\n    placeholder: \"Duration\",\n    ref: register({\n      required: true\n    }),\n    type: \"text\",\n    isInvalid: Boolean(errors.serviceDuration),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), errors.serviceDuration && renderInvalidMessage()), React.createElement(Form.Group, {\n    controlId: \"image\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Image\"), React.createElement(Form.Control, {\n    name: \"image\",\n    type: \"file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), React.createElement(Form.Group, {\n    controlId: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    className: \"sr-only\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Description\"), React.createElement(Form.Control, {\n    name: \"serviceDescription\",\n    as: \"textarea\",\n    defaultValue: isEditing ? `${editService.description}` : null,\n    placeholder: \"Description\",\n    ref: register({\n      required: true\n    }),\n    rows: \"2\",\n    isInvalid: Boolean(errors.serviceDescription),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), errors.serviceDescription && renderInvalidMessage()), React.createElement(Form.Group, {\n    controlId: \"price\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    className: \"sr-only\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"Price\"), React.createElement(Form.Control, {\n    name: \"servicePrice\",\n    defaultValue: isEditing ? `${editService.price}` : null,\n    placeholder: \"Price\",\n    ref: register({\n      required: true\n    }),\n    type: \"text\",\n    isInvalid: Boolean(errors.servicePrice),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), errors.servicePrice && renderInvalidMessage())), React.createElement(Modal.Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"link\",\n    onClick: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Save\")));\n}\n\nexport default AddService;","map":{"version":3,"sources":["/Users/aaronbeach/Desktop/workspace/SampleWork/src/Profile/EditProfile/Services/AddService.jsx"],"names":["Form","Button","Modal","React","useForm","renderInvalidMessage","AddService","onClose","isEditing","editService","register","handleSubmit","errors","onSubmit","data","console","log","name","required","Boolean","serviceName","serviceType","duration","serviceDuration","description","serviceDescription","price","servicePrice"],"mappings":";AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,QAAoC,iBAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,oBAAT,QAAqC,oCAArC;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,SAAX;AAAsBC,EAAAA;AAAtB,CAApB,EAAyD;AAAA,mBACZL,OAAO,EADK;AAAA,QAC/CM,QAD+C,YAC/CA,QAD+C;AAAA,QACrCC,YADqC,YACrCA,YADqC;AAAA,QACvBC,MADuB,YACvBA,MADuB;;AAEvD,QAAMC,QAAQ,GAAGC,IAAI,IAAI;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAP,IAAAA,OAAO;AACR,GAHD;;AAKA,SACE,oBAAC,IAAD;AAAM,IAAA,UAAU,MAAhB;AAAiB,IAAA,QAAQ,EAAEI,YAAY,CAACE,QAAD,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,SAAS,GAAI,QAAOC,WAAW,CAACQ,IAAK,EAA5B,GAAgC,aAD5C,CADF,CADF,EAME,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,oBAAC,IAAD,CAAM,OAAN;AACE,IAAA,IAAI,EAAC,aADP;AAEE,IAAA,YAAY,EAAET,SAAS,GAAI,GAAEC,WAAW,CAACQ,IAAK,EAAvB,GAA2B,IAFpD;AAGE,IAAA,WAAW,EAAC,cAHd;AAIE,IAAA,GAAG,EAAEP,QAAQ,CAAC;AAAEQ,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAJf;AAKE,IAAA,IAAI,EAAC,MALP;AAME,IAAA,SAAS,EAAEC,OAAO,CAACP,MAAM,CAACQ,WAAR,CANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAUGR,MAAM,CAACQ,WAAP,IAAsBf,oBAAoB,EAV7C,CADF,EAcE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,oBAAC,IAAD,CAAM,OAAN;AACE,IAAA,EAAE,EAAC,QADL;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,IAAA,SAAS,EAAC,0BAHZ;AAIE,IAAA,WAAW,EAAC,cAJd;AAKE,IAAA,GAAG,EAAEK,QAAQ,CAAC;AAAEQ,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CALf;AAME,IAAA,SAAS,EAAEC,OAAO,CAACP,MAAM,CAACS,WAAR,CANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,EASE;AAAQ,IAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATF,EAUE;AAAQ,IAAA,KAAK,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVF,CAFF,EAcGT,MAAM,CAACS,WAAP,IAAsBhB,oBAAoB,EAd7C,CAdF,EA+BE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,oBAAC,IAAD,CAAM,OAAN;AACE,IAAA,IAAI,EAAC,iBADP;AAEE,IAAA,YAAY,EAAEG,SAAS,GAAI,GAAEC,WAAW,CAACa,QAAS,EAA3B,GAA+B,IAFxD;AAGE,IAAA,WAAW,EAAC,UAHd;AAIE,IAAA,GAAG,EAAEZ,QAAQ,CAAC;AAAEQ,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAJf;AAKE,IAAA,IAAI,EAAC,MALP;AAME,IAAA,SAAS,EAAEC,OAAO,CAACP,MAAM,CAACW,eAAR,CANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAUGX,MAAM,CAACW,eAAP,IAA0BlB,oBAAoB,EAVjD,CA/BF,EA4CE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE,oBAAC,IAAD,CAAM,OAAN;AAAc,IAAA,IAAI,EAAC,OAAnB;AAA2B,IAAA,IAAI,EAAC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CA5CF,EAiDE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,oBAAC,IAAD,CAAM,OAAN;AACE,IAAA,IAAI,EAAC,oBADP;AAEE,IAAA,EAAE,EAAC,UAFL;AAGE,IAAA,YAAY,EAAEG,SAAS,GAAI,GAAEC,WAAW,CAACe,WAAY,EAA9B,GAAkC,IAH3D;AAIE,IAAA,WAAW,EAAC,aAJd;AAKE,IAAA,GAAG,EAAEd,QAAQ,CAAC;AAAEQ,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CALf;AAME,IAAA,IAAI,EAAC,GANP;AAOE,IAAA,SAAS,EAAEC,OAAO,CAACP,MAAM,CAACa,kBAAR,CAPpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAWGb,MAAM,CAACa,kBAAP,IAA6BpB,oBAAoB,EAXpD,CAjDF,EA+DE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE,oBAAC,IAAD,CAAM,OAAN;AACE,IAAA,IAAI,EAAC,cADP;AAEE,IAAA,YAAY,EAAEG,SAAS,GAAI,GAAEC,WAAW,CAACiB,KAAM,EAAxB,GAA4B,IAFrD;AAGE,IAAA,WAAW,EAAC,OAHd;AAIE,IAAA,GAAG,EAAEhB,QAAQ,CAAC;AAAEQ,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAJf;AAKE,IAAA,IAAI,EAAC,MALP;AAME,IAAA,SAAS,EAAEC,OAAO,CAACP,MAAM,CAACe,YAAR,CANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAUGf,MAAM,CAACe,YAAP,IAAuBtB,oBAAoB,EAV9C,CA/DF,CANF,EAkFE,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,MAAhB;AAAuB,IAAA,OAAO,EAAEE,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAIE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAA0B,IAAA,IAAI,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,CAlFF,CADF;AA6FD;;AAED,eAAeD,UAAf","sourcesContent":["import { Form, Button, Modal } from \"react-bootstrap\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { renderInvalidMessage } from \"SharedComponents/ValidationMessage\";\n\nfunction AddService({ onClose, isEditing, editService }) {\n  const { register, handleSubmit, errors } = useForm();\n  const onSubmit = data => {\n    console.log(data);\n    onClose();\n  };\n\n  return (\n    <Form noValidate onSubmit={handleSubmit(onSubmit)}>\n      <Modal.Header closeButton>\n        <Modal.Title>\n          {isEditing ? `Edit ${editService.name}` : \"Add Service\"}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form.Group controlId=\"serviceName\">\n          <Form.Label className=\"sr-only\">Service Name</Form.Label>\n          <Form.Control\n            name=\"serviceName\"\n            defaultValue={isEditing ? `${editService.name}` : null}\n            placeholder=\"Service Name\"\n            ref={register({ required: true })}\n            type=\"text\"\n            isInvalid={Boolean(errors.serviceName)}\n          />\n          {errors.serviceName && renderInvalidMessage()}\n        </Form.Group>\n\n        <Form.Group controlId=\"type\">\n          <Form.Label className=\"sr-only\">Service Type</Form.Label>\n          <Form.Control\n            as=\"select\"\n            name=\"serviceType\"\n            className=\"custom-select text-muted\"\n            placeholder=\"Service Type\"\n            ref={register({ required: true })}\n            isInvalid={Boolean(errors.serviceType)}\n          >\n            <option value=\"\">Service Type</option>\n            <option value=\"Copywriting\">Copywriting</option>\n            <option value=\"Website Design\">Website Design</option>\n          </Form.Control>\n          {errors.serviceType && renderInvalidMessage()}\n        </Form.Group>\n\n        <Form.Group controlId=\"duration\">\n          <Form.Label className=\"sr-only\">Duration</Form.Label>\n          <Form.Control\n            name=\"serviceDuration\"\n            defaultValue={isEditing ? `${editService.duration}` : null}\n            placeholder=\"Duration\"\n            ref={register({ required: true })}\n            type=\"text\"\n            isInvalid={Boolean(errors.serviceDuration)}\n          />\n          {errors.serviceDuration && renderInvalidMessage()}\n        </Form.Group>\n\n        <Form.Group controlId=\"image\">\n          <Form.Label>Image</Form.Label>\n          <Form.Control name=\"image\" type=\"file\" />\n        </Form.Group>\n\n        <Form.Group controlId=\"description\">\n          <Form.Label className=\"sr-only\">Description</Form.Label>\n          <Form.Control\n            name=\"serviceDescription\"\n            as=\"textarea\"\n            defaultValue={isEditing ? `${editService.description}` : null}\n            placeholder=\"Description\"\n            ref={register({ required: true })}\n            rows=\"2\"\n            isInvalid={Boolean(errors.serviceDescription)}\n          />\n          {errors.serviceDescription && renderInvalidMessage()}\n        </Form.Group>\n\n        <Form.Group controlId=\"price\">\n          <Form.Label className=\"sr-only\">Price</Form.Label>\n          <Form.Control\n            name=\"servicePrice\"\n            defaultValue={isEditing ? `${editService.price}` : null}\n            placeholder=\"Price\"\n            ref={register({ required: true })}\n            type=\"text\"\n            isInvalid={Boolean(errors.servicePrice)}\n          />\n          {errors.servicePrice && renderInvalidMessage()}\n        </Form.Group>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"link\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button variant=\"primary\" type=\"submit\">\n          Save\n        </Button>\n      </Modal.Footer>\n    </Form>\n  );\n}\n\nexport default AddService;\n"]},"metadata":{},"sourceType":"module"}