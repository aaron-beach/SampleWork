{"ast":null,"code":"var _jsxFileName = \"/Users/aaronbeach/Desktop/workspace/riseworks/spa/src/Projects/MyProjects/ProjectGroup.jsx\";\nimport { PROJECT_STATUS_COMPLETE, PROJECT_STATUS_OPEN, PROJECT_STATUS_PENDING } from \"../constants\";\nimport { Accordion } from \"react-bootstrap\";\nimport Project from \"./Project\";\nimport React from \"react\";\nimport arrowIcon from \"images/arrowDown.svg\";\nimport icon from \"images/projectGroupSolid.svg\";\nimport styled from \"styled-components\";\nconst Wrapper = styled.div``;\nconst Toggle = styled.div`\n  cursor: pointer;\n  margin: 1rem 0;\n  font-size: 0.8125rem;\n  font-weight: 700;\n  display: grid;\n  grid-template-columns: auto 1fr auto;\n\n  .arrow {\n    transform: translateY(7px) rotate(0deg);\n    &:not(.invert) {\n      transform: translateY(7px) rotate(180deg);\n    }\n  }\n`;\n\nfunction ProjectGroup({\n  currentProjectID,\n  projects,\n  isExpanded,\n  type\n}) {\n  const renderGroupTitle = () => {\n    const count = projects.length;\n    let groupType;\n\n    switch (type) {\n      case PROJECT_STATUS_COMPLETE:\n        groupType = \"Completed\";\n        break;\n\n      case PROJECT_STATUS_OPEN:\n        groupType = \"Open\";\n        break;\n\n      case PROJECT_STATUS_PENDING:\n      default:\n        groupType = \"Pending\";\n        break;\n    }\n\n    return `${count} ${groupType} Project${count !== 1 ? \"s\" : \"\"}`;\n  };\n\n  return React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Accordion.Toggle, {\n    as: Toggle,\n    eventKey: type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"d-block mr-2\",\n    src: icon,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), renderGroupTitle(), React.createElement(\"img\", {\n    src: arrowIcon,\n    alt: \"\",\n    className: `arrow ${isExpanded ? \"invert\" : \"\"}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })), React.createElement(Accordion.Collapse, {\n    eventKey: type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(React.Fragment, null, projects.map(p => {\n    return React.createElement(Project, {\n      isActive: p.id === currentProjectID,\n      key: `project-${p.id}`,\n      title: p.title,\n      partner: p.partner,\n      projectID: p.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    });\n  }))));\n}\n\nexport default ProjectGroup;","map":{"version":3,"sources":["/Users/aaronbeach/Desktop/workspace/riseworks/spa/src/Projects/MyProjects/ProjectGroup.jsx"],"names":["PROJECT_STATUS_COMPLETE","PROJECT_STATUS_OPEN","PROJECT_STATUS_PENDING","Accordion","Project","React","styled","Wrapper","div","Toggle","ProjectGroup","currentProjectID","projects","isExpanded","type","renderGroupTitle","count","length","groupType","icon","arrowIcon","map","p","id","title","partner"],"mappings":";AAAA,SACEA,uBADF,EAEEC,mBAFF,EAGEC,sBAHF,QAIO,cAJP;AAMA,SAASC,SAAT,QAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAGA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,OAAO,GAAGD,MAAM,CAACE,GAAI,EAA3B;AACA,MAAMC,MAAM,GAAGH,MAAM,CAACE,GAAI;;;;;;;;;;;;;;CAA1B;;AAgBA,SAASE,YAAT,CAAsB;AAAEC,EAAAA,gBAAF;AAAoBC,EAAAA,QAApB;AAA8BC,EAAAA,UAA9B;AAA0CC,EAAAA;AAA1C,CAAtB,EAAwE;AACtE,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,UAAMC,KAAK,GAAGJ,QAAQ,CAACK,MAAvB;AACA,QAAIC,SAAJ;;AACA,YAAQJ,IAAR;AACE,WAAKd,uBAAL;AACEkB,QAAAA,SAAS,GAAG,WAAZ;AACA;;AACF,WAAKjB,mBAAL;AACEiB,QAAAA,SAAS,GAAG,MAAZ;AACA;;AACF,WAAKhB,sBAAL;AACA;AACEgB,QAAAA,SAAS,GAAG,SAAZ;AACA;AAVJ;;AAYA,WAAQ,GAAEF,KAAM,IAAGE,SAAU,WAAUF,KAAK,KAAK,CAAV,GAAc,GAAd,GAAoB,EAAG,EAA9D;AACD,GAhBD;;AAkBA,SACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD,CAAW,MAAX;AAAkB,IAAA,EAAE,EAAEP,MAAtB;AAA8B,IAAA,QAAQ,EAAEK,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAA8B,IAAA,GAAG,EAAEK,IAAnC;AAAyC,IAAA,GAAG,EAAC,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGJ,gBAAgB,EAFnB,EAGE;AACE,IAAA,GAAG,EAAEK,SADP;AAEE,IAAA,GAAG,EAAC,EAFN;AAGE,IAAA,SAAS,EAAG,SAAQP,UAAU,GAAG,QAAH,GAAc,EAAG,EAHjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,EAUE,oBAAC,SAAD,CAAW,QAAX;AAAoB,IAAA,QAAQ,EAAEC,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,0CACGF,QAAQ,CAACS,GAAT,CAAaC,CAAC,IAAI;AACjB,WACE,oBAAC,OAAD;AACE,MAAA,QAAQ,EAAEA,CAAC,CAACC,EAAF,KAASZ,gBADrB;AAEE,MAAA,GAAG,EAAG,WAAUW,CAAC,CAACC,EAAG,EAFvB;AAGE,MAAA,KAAK,EAAED,CAAC,CAACE,KAHX;AAIE,MAAA,OAAO,EAAEF,CAAC,CAACG,OAJb;AAKE,MAAA,SAAS,EAAEH,CAAC,CAACC,EALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD,GAVA,CADH,CADF,CAVF,CADF;AA4BD;;AAED,eAAeb,YAAf","sourcesContent":["import {\n  PROJECT_STATUS_COMPLETE,\n  PROJECT_STATUS_OPEN,\n  PROJECT_STATUS_PENDING\n} from \"../constants\";\n\nimport { Accordion } from \"react-bootstrap\";\nimport Project from \"./Project\";\nimport React from \"react\";\nimport arrowIcon from \"images/arrowDown.svg\";\nimport icon from \"images/projectGroupSolid.svg\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div``;\nconst Toggle = styled.div`\n  cursor: pointer;\n  margin: 1rem 0;\n  font-size: 0.8125rem;\n  font-weight: 700;\n  display: grid;\n  grid-template-columns: auto 1fr auto;\n\n  .arrow {\n    transform: translateY(7px) rotate(0deg);\n    &:not(.invert) {\n      transform: translateY(7px) rotate(180deg);\n    }\n  }\n`;\n\nfunction ProjectGroup({ currentProjectID, projects, isExpanded, type }) {\n  const renderGroupTitle = () => {\n    const count = projects.length;\n    let groupType;\n    switch (type) {\n      case PROJECT_STATUS_COMPLETE:\n        groupType = \"Completed\";\n        break;\n      case PROJECT_STATUS_OPEN:\n        groupType = \"Open\";\n        break;\n      case PROJECT_STATUS_PENDING:\n      default:\n        groupType = \"Pending\";\n        break;\n    }\n    return `${count} ${groupType} Project${count !== 1 ? \"s\" : \"\"}`;\n  };\n\n  return (\n    <Wrapper>\n      <Accordion.Toggle as={Toggle} eventKey={type}>\n        <img className=\"d-block mr-2\" src={icon} alt=\"\" />\n        {renderGroupTitle()}\n        <img\n          src={arrowIcon}\n          alt=\"\"\n          className={`arrow ${isExpanded ? \"invert\" : \"\"}`}\n        />\n      </Accordion.Toggle>\n      <Accordion.Collapse eventKey={type}>\n        <>\n          {projects.map(p => {\n            return (\n              <Project\n                isActive={p.id === currentProjectID}\n                key={`project-${p.id}`}\n                title={p.title}\n                partner={p.partner}\n                projectID={p.id}\n              />\n            );\n          })}\n        </>\n      </Accordion.Collapse>\n    </Wrapper>\n  );\n}\n\nexport default ProjectGroup;\n"]},"metadata":{},"sourceType":"module"}