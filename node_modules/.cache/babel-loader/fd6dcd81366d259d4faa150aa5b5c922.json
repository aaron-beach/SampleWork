{"ast":null,"code":"var _jsxFileName = \"/Users/aaronbeach/Desktop/workspace/riseworks/spa/src/Profile/EditProfile/ProfileDetails.jsx\";\nimport { Button, Col, Card, Form, Row } from \"react-bootstrap\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nfunction ProfileDetails() {\n  const _useForm = useForm(),\n        register = _useForm.register,\n        handleSubmit = _useForm.handleSubmit,\n        errors = _useForm.errors;\n\n  const onSubmit = data => {\n    console.log(data);\n  }; // form submit function will invoke after successful validation\n\n\n  return React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(Card.Title, {\n    className: \"p-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"User Details\"), React.createElement(Form, {\n    noValidate: true,\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(Form.Group, {\n    as: Row,\n    controlId: \"UserName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    className: \"sr-only\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"First Name\"), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    name: \"firstName\",\n    placeholder: \"First Name\",\n    ref: register({\n      required: true\n    }),\n    type: \"text\",\n    isInvalid: !!errors.firstName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }), errors.firstName && React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Please provide a valid first name\")), React.createElement(Form.Label, {\n    className: \"sr-only\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Last Name\"), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    name: \"lastName\",\n    placeholder: \"Last Name\",\n    ref: register({\n      required: true\n    }),\n    type: \"text\",\n    isInvalid: !!errors.lastName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), errors.lastName && React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, 'Please provide a valid last name'))), React.createElement(Form.Group, {\n    as: Row,\n    controlId: \"organization\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    className: \"sr-only\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Title\"), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    name: \"title\",\n    placeholder: \"Title\",\n    ref: register({\n      required: true\n    }),\n    type: \"text\",\n    isInvalid: !!errors.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), errors.title && React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, 'Please provide a valid title')), React.createElement(Form.Label, {\n    className: \"sr-only\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Company\"), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    name: \"company\",\n    placeholder: \"Company\",\n    ref: register,\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }))), React.createElement(Form.Group, {\n    as: Row,\n    controlId: \"location\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    className: \"sr-only\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"City\"), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    name: \"city\",\n    placeholder: \"City\",\n    ref: register({\n      required: true\n    }),\n    type: \"text\",\n    isInvalid: !!errors.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), errors.city && React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, 'Please provide a valid city')), React.createElement(Form.Label, {\n    className: \"sr-only\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Country\"), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Form.Control, {\n    name: \"country\",\n    placeholder: \"Country\",\n    ref: register({\n      required: true\n    }),\n    type: \"text\",\n    isInvalid: !!errors.country,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), errors.country && React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, 'Please provide a valid country'))), React.createElement(Button, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Save\"))));\n}\n\nexport default ProfileDetails;","map":{"version":3,"sources":["/Users/aaronbeach/Desktop/workspace/riseworks/spa/src/Profile/EditProfile/ProfileDetails.jsx"],"names":["Button","Col","Card","Form","Row","React","useForm","ProfileDetails","register","handleSubmit","errors","onSubmit","data","console","log","required","firstName","lastName","title","city","country"],"mappings":"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","sourcesContent":["import { Button, Col, Card, Form, Row } from \"react-bootstrap\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nfunction ProfileDetails() {\n  const { register, handleSubmit, errors } = useForm();\n  const onSubmit = data => {\n    console.log(data);\n  }; // form submit function will invoke after successful validation\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title className=\"p-2\">User Details</Card.Title>\n        <Form noValidate onSubmit={handleSubmit(onSubmit)} >\n          <Form.Group as={Row} controlId=\"UserName\">\n            <Form.Label className=\"sr-only\">First Name</Form.Label>\n            <Col>\n              <Form.Control\n                name=\"firstName\"\n                placeholder=\"First Name\"\n                ref={register({ required: true })}\n                type=\"text\"\n                isInvalid={!!errors.firstName}\n              />\n              {errors.firstName && (<Form.Control.Feedback type=\"invalid\">Please provide a valid first name</Form.Control.Feedback>)}\n            </Col>\n            <Form.Label className=\"sr-only\">Last Name</Form.Label>\n            <Col>\n              <Form.Control\n                name=\"lastName\"\n                placeholder=\"Last Name\"\n                ref={register({ required: true })}\n                type=\"text\"\n                isInvalid={!!errors.lastName}\n              />\n              {errors.lastName && (<Form.Control.Feedback type=\"invalid\">{'Please provide a valid last name'}</Form.Control.Feedback>)}\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row} controlId=\"organization\">\n            <Form.Label className=\"sr-only\">Title</Form.Label>\n            <Col>\n              <Form.Control \n                name=\"title\"\n                placeholder=\"Title\"\n                ref={register({ required: true })}\n                type=\"text\"\n                isInvalid={!!errors.title}\n              />\n              {errors.title && (<Form.Control.Feedback type=\"invalid\">{'Please provide a valid title'}</Form.Control.Feedback>)}\n            </Col>\n            <Form.Label className=\"sr-only\">Company</Form.Label>\n            <Col>\n              <Form.Control\n                name=\"company\" \n                placeholder=\"Company\" \n                ref={register}\n                type=\"text\" \n              />\n            </Col>\n          </Form.Group>\n\n          <Form.Group as={Row} controlId=\"location\">\n            <Form.Label className=\"sr-only\">City</Form.Label>\n            <Col>\n              <Form.Control \n                name=\"city\"\n                placeholder=\"City\"\n                ref={register({ required: true })}\n                type=\"text\"\n                isInvalid={!!errors.title}\n              />\n              {errors.city && (<Form.Control.Feedback type=\"invalid\">{'Please provide a valid city'}</Form.Control.Feedback>)}\n            </Col>\n            <Form.Label className=\"sr-only\">Country</Form.Label>\n            <Col>\n              <Form.Control \n                name=\"country\"\n                placeholder=\"Country\"\n                ref={register({ required: true })}\n                type=\"text\"\n                isInvalid={!!errors.country}\n              />\n              {errors.country && (<Form.Control.Feedback type=\"invalid\">{'Please provide a valid country'}</Form.Control.Feedback>)}\n            </Col>\n          </Form.Group>\n\n          <Button type=\"submit\">Save</Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default ProfileDetails;\n"]},"metadata":{},"sourceType":"module"}